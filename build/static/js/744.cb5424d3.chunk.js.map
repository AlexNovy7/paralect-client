{"version":3,"file":"static/js/744.cb5424d3.chunk.js","mappings":"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","sources":["app/job-applications/store/job-applications.selectors.ts","app/job-applications/components/job-application-dialog.tsx","app/job-applications/components/job-application-list.tsx","app/job-applications/components/add-job-application-button.tsx","app/job-applications/components/delete-job-application-button.tsx","app/job-applications/JobApplications.page.tsx"],"sourcesContent":["import { RootState } from 'store';\n\nexport const jobApplicationsSelector = (state: RootState) => state.jobApplications.jobApplications;\nexport const jobApplicationsLoadingSelector = (state: RootState) => state.jobApplications.pending;\nexport const jobApplicationsErrorSelector = (state: RootState) => state.jobApplications.errors;\n","import React, { useEffect, useState } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField } from '@mui/material';\nimport { JobApplication } from '../types/job-application.type';\nimport { JobApplicationDialogProps } from '../types/job-application-dialog.props';\n\n\nconst JobApplicationDialog: React.FC<JobApplicationDialogProps> = ({ open, onClose, onSubmit, initialData, isEditing }) => {\n  const [formData, setFormData] = useState<JobApplication>({\n    id: '',\n    company: '',\n    jobTitle: '',\n    salaryRange: '',\n    status: '',\n    note: ''\n  });\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData(initialData);\n    } else {\n      setFormData({ id: '', company: '', jobTitle: '', salaryRange: '', status: '', note: '' });\n    }\n  }, [initialData]);\n\n  const handleSubmit = () => {\n    onSubmit(formData);\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>{isEditing ? 'Edit Application' : 'Add Application'}</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Компания\"\n          fullWidth\n          margin=\"normal\"\n          value={formData.company}\n          onChange={(e) => setFormData({ ...formData, company: e.target.value })}\n        />\n        <TextField\n          label=\"Вакансия\"\n          fullWidth\n          margin=\"normal\"\n          value={formData.jobTitle}\n          onChange={(e) => setFormData({ ...formData, jobTitle: e.target.value })}\n        />\n        <TextField\n          label=\"Зарплатная вилка\"\n          fullWidth\n          margin=\"normal\"\n          value={formData.salaryRange}\n          onChange={(e) => setFormData({ ...formData, salaryRange: e.target.value })}\n        />\n        <TextField\n          label=\"Статус\"\n          fullWidth\n          margin=\"normal\"\n          value={formData.status}\n          onChange={(e) => setFormData({ ...formData, status: e.target.value })}\n        />\n        <TextField\n          label=\"Заметка\"\n          fullWidth\n          margin=\"normal\"\n          value={formData.note}\n          onChange={(e) => setFormData({ ...formData, note: e.target.value })}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"secondary\">Cancel</Button>\n        <Button onClick={handleSubmit} color=\"primary\">{isEditing ? 'Save' : 'Add'}</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default JobApplicationDialog;\n","import React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { JobApplicationListProps } from '../types/job-application-list.props';\n\nconst JobApplicationList: React.FC<JobApplicationListProps> = ({\n  jobApplications,\n  onRowClick,\n  onSelectionChange\n}) => {\n  const columns = [\n    { field: 'id', headerName: 'ID', width: 300 },\n    { field: 'company', headerName: 'Компания', width: 250 },\n    { field: 'jobTitle', headerName: 'Вакансия', width: 250 },\n    { field: 'salaryRange', headerName: 'Зарплатная вилка', width: 150 },\n    { field: 'status', headerName: 'Статус отклика', width: 150 },\n    { field: 'note', headerName: 'Заметка', width: 300 }\n  ];\n\n  return (\n    <DataGrid\n      rows={jobApplications}\n      columns={columns}\n      autoHeight\n      pageSize={jobApplications.length}\n      rowsPerPageOptions={[jobApplications.length]}\n      disableSelectionOnClick\n      checkboxSelection\n      onSelectionModelChange={(newSelection) => {\n        onSelectionChange(newSelection as string[]);\n      }}\n      onRowClick={({ row }) => onRowClick(row)}\n      sx={{\n        '& .MuiDataGrid-row': {\n          cursor: 'pointer',\n        },\n        '& .MuiDataGrid-columnHeader': {\n          cursor: 'default',\n        },\n        '& .Mui-selected': {\n          backgroundColor: 'transparent',\n        }\n      }}\n    />\n  );\n};\n\nexport default JobApplicationList;\n","import React from 'react';\nimport { Button } from '@mui/material';\nimport { Add } from '@mui/icons-material';\nimport { AddJobApplicationButtonProps } from '../types/add-job-application-button.props';\n\nconst AddJobApplicationButton: React.FC<AddJobApplicationButtonProps> = ({ onAddNew }) => {\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={onAddNew}\n      startIcon={<Add />}\n      sx={{ marginRight: '5px' }}\n    >\n      Add New\n    </Button>\n  );\n};\n\nexport default AddJobApplicationButton;\n","import React from 'react';\nimport { Button } from '@mui/material';\nimport { Delete } from '@mui/icons-material';\nimport { DeleteJobApplicationButtonProps } from '../types/delete-job-application-button.props';\n\nconst DeleteJobApplicationButton: React.FC<DeleteJobApplicationButtonProps> = ({ onDelete }) => {\n  return (\n    <Button\n      variant=\"outlined\"\n      color=\"error\"\n      onClick={onDelete}\n      startIcon={<Delete />}\n    >\n      Delete\n    </Button>\n  );\n};\n\nexport default DeleteJobApplicationButton;\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getJobApplications, deleteJobApplication, addJobApplication, editJobApplication } from './store/job-applications.actions';\r\nimport { jobApplicationsSelector } from './store/job-applications.selectors';\r\nimport { JobApplication } from './types/job-application.type';\r\nimport JobApplicationDialog from './components/job-application-dialog';\r\nimport JobApplicationList from './components/job-application-list';\r\nimport AddJobApplicationButton from './components/add-job-application-button';\r\nimport DeleteJobApplicationButton from './components/delete-job-application-button';\r\nimport { Box, Typography } from '@mui/material';\r\n\r\nconst JobApplicationsPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const jobApplications = useSelector(jobApplicationsSelector);\r\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [initialData, setInitialData] = useState<JobApplication | null>(null);\r\n\r\n  useEffect(() => {\r\n    dispatch<any>(getJobApplications());\r\n  }, [dispatch]);\r\n\r\n  const handleDelete = () => {\r\n    if (selectedIds.length > 0) {\r\n      dispatch<any>(deleteJobApplication(selectedIds)).then(() => {\r\n        dispatch<any>(getJobApplications());\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (rowData: JobApplication) => {\r\n    setIsEditing(true);\r\n    setInitialData({\r\n      company: rowData.company || '',\r\n      jobTitle: rowData.jobTitle || '',  \r\n      salaryRange: rowData.salaryRange ?? '',  \r\n      status: rowData.status ?? '', \r\n      note: rowData.note ?? ''  \r\n    });\r\n    setSelectedIds([rowData.id ?? '']);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleSelectionChange = (newSelection: string[]) => {\r\n    setSelectedIds(newSelection);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setIsEditing(false);\r\n    setInitialData(null);\r\n  };\r\n\r\n  const handleSubmit = (formData: JobApplication) => {\r\n    if (isEditing) {\r\n      dispatch<any>(editJobApplication({ id: selectedIds[0], applicationData: formData })).then(() => {\r\n        dispatch<any>(getJobApplications());\r\n        setOpenDialog(false);\r\n      });\r\n    } else {\r\n      dispatch<any>(addJobApplication(formData)).then(() => {\r\n        dispatch<any>(getJobApplications());\r\n        setOpenDialog(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleAddNew = () => {\r\n    setIsEditing(false);\r\n    setInitialData({ company: '', jobTitle: '', salaryRange: '', status: '', note: '' });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ height: 'auto', width: '95%', padding: '20px' }}>\r\n      <Typography variant=\"h4\" component=\"h1\" sx={{ marginBottom: '20px' }}>\r\n        Job Applications List\r\n      </Typography>\r\n\r\n      <Box sx={{ display: 'flex', marginBottom: '20px' }}>\r\n        <AddJobApplicationButton onAddNew={handleAddNew} />\r\n        <DeleteJobApplicationButton onDelete={handleDelete} />\r\n      </Box>\r\n\r\n      <JobApplicationList\r\n        jobApplications={jobApplications}\r\n        onRowClick={handleRowClick}\r\n        onSelectionChange={handleSelectionChange}\r\n      />\r\n\r\n      <JobApplicationDialog\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n        onSubmit={handleSubmit}\r\n        initialData={initialData}\r\n        isEditing={isEditing}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default JobApplicationsPage;\r\n"],"names":["jobApplicationsSelector","state","jobApplications","_ref","open","onClose","onSubmit","initialData","isEditing","formData","setFormData","useState","id","company","jobTitle","salaryRange","status","note","useEffect","_jsxs","Dialog","children","_jsx","DialogTitle","DialogContent","TextField","label","fullWidth","margin","value","onChange","e","target","DialogActions","Button","onClick","color","handleSubmit","onRowClick","onSelectionChange","DataGrid","rows","columns","field","headerName","width","autoHeight","pageSize","length","rowsPerPageOptions","disableSelectionOnClick","checkboxSelection","onSelectionModelChange","newSelection","_ref2","row","sx","cursor","backgroundColor","onAddNew","variant","startIcon","Add","marginRight","onDelete","Delete","JobApplicationsPage","dispatch","useDispatch","useSelector","selectedIds","setSelectedIds","openDialog","setOpenDialog","setIsEditing","setInitialData","getJobApplications","Box","height","padding","Typography","component","marginBottom","display","AddJobApplicationButton","handleAddNew","DeleteJobApplicationButton","handleDelete","deleteJobApplication","then","JobApplicationList","rowData","_rowData$salaryRange","_rowData$status","_rowData$note","_rowData$id","JobApplicationDialog","handleCloseDialog","editJobApplication","applicationData","addJobApplication"],"sourceRoot":""}